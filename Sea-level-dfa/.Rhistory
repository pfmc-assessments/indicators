graphics.off()
png( paste0("Figure_Fitted_Model_",yrmin,'-',yrmax,'.png') )
plot_fitted(bmod, names = rownames(bmod$orig_data))+ theme_bw()
dev.off()
## plot rotated loadings ####
graphics.off()
png( paste0("Figure_Rotated_Loadings_",yrmin,'-',yrmax,'.png') )
plot_loadings(df_rotated)
dev.off()
## plot rotated trends ####
graphics.off()
png( paste0("Figure_Rotated_Trends_",yrmin,'-',yrmax,'.png') )
plot_trends(df_rotated)
dev.off()
trends = t(df_rotated$trends_mean)
colnames(trends) <- c(paste0('DF',1:5))
uCI = t(df_rotated$trends_upper)
colnames(uCI) <- c(paste0('uCI',1:5))
lCI = t(df_rotated$trends_lower)
colnames(lCI) <- c(paste0('lCI',1:5))
df.out <- data.frame(cbind(trends,uCI,lCI))
df.out$year = yrmin:yrmax
df_out <-  df.out %>% select(year,
DF1, DF2, DF3, DF4, DF5,
lCI1, lCI2, lCI3, lCI4, lCI5,
uCI1, uCI2, uCI3, uCI4, uCI5
)
write.csv(df_out, paste0('Data_Sea_Level_Indices_',yrmin,"_",yrmax,'.csv'), row.names = FALSE)
saveRDS(df_out, file = paste0('Data_Sea_Level_Indices_',yrmin,"_",yrmax,'.rds'))
bfit_1 <- fit_dfa( y = ssh,
num_trends = 1,
varIndx = R_un,
chains = 4,
iter = 5000,
scale = "zscore",
data_shape = 'wide'
# warmup = warmups,
# thin=1,
# estimate_nu = TRUE,
# estimate_trend_ar = TRUE,
#control = list(adapt_delta = 0.99,
#max_treedepth = 30)
)
# run a one (1) DF version
run_one = TRUE
if(run_one == TRUE){ # begin if
R_un = 1:length(rownames(ssh))
bfit_1 <- fit_dfa( y = ssh,
num_trends = 1,
varIndx = R_un,
chains = 4,
iter = 5000,
scale = "zscore",
data_shape = 'wide'
# warmup = warmups,
# thin=1,
# estimate_nu = TRUE,
# estimate_trend_ar = TRUE,
#control = list(adapt_delta = 0.99,
#max_treedepth = 30)
)
saveRDS(bfit_1 , paste0(results_loc,"Bayesian-DFA-SSH-DF1-",yrmin,'-',yrmax,"-fit.rds"))
# rotate loadings and trends for saving out
rotated_bfit_1 <- rotate_trends(bfit_5)
saveRDS(rotated_bfit_1, paste0(results_loc,"Bayesian-DFA-SSH-DF1-",yrmin,'-',yrmax,"-rotated.rds"))
}
# rotate loadings and trends for saving out
rotated_bfit_1 <- rotate_trends(bfit_1)
saveRDS(rotated_bfit_1, paste0(results_loc,"Bayesian-DFA-SSH-DF1-",yrmin,'-',yrmax,"-rotated.rds"))
plot_fitted(bfit_1)
m1 = readRDS(paste0(results_loc,"Bayesian-DFA-SSH-DF1-",yrmin,'-',yrmax,"-fit.rds"))
plot_fitted(m1)
r1 = rotate_trends(m1)
plot_loadings(r1)
plot_loadings(m1)
plot_trends(r1)
plot_loadings(r1)
names(m1)
names(r1)
r1$Z_rot_mean
r1$trends
r1$trends_mean
plot(r1$trends_mean, df_rotated$trends_mean)
plot(r1$trends_mean, df_rotated$trends_mean[1,])
plot(r1$trends_mean, df_rotated$trends_mean[1,],
xlab="1-trend", ylab='5-trend')
cor1 = cor.test(r1$trends_mean, df_rotated$trends_mean[1,])
cor1 = cor.test(r1$trends_mean, df_rotated$trends_mean[1,])
r1$trends_mean
df_rotated$trends_mean[1,]
x = r1$trends_mean
length(x)
y = df_rotated$trends_mean[1,]
length(y)
cor1 = cor.test(x,y)
x = as.vector(r1$trends_mean)
y = as.vector(df_rotated$trends_mean[1,])
cor1 = cor.test(x,y)
cor1
iterations = 2000
cntl.list = list(maxit=2000)
model.list = list( m = 5, R = "diagonal and unequal" )
#### DFA MODEL HERE ####
marss_fit = MARSS(ssh, model=model.list, method='BFGS',
demean=TRUE, z.score=TRUE, form="dfa", control=cntl.list)
### Check vs MARSS dfa #################################################
# just for fun #########################################################
library(MARSS)
marss_fit = MARSS(ssh, model=model.list, method='BFGS',
demean=TRUE, z.score=TRUE, form="dfa", control=cntl.list)
saveRDS(marss_fit, paste0(results_loc,"MARSS_dfa.rds"))
RShowDoc("UserGuide", package = "MARSS")
Z.est = coef(marss_fit, type="matrix")$Z
H.inv <- 1
if (ncol(Z.est) > 1)
H.inv <- varimax(coef(marss_fit, type = "matrix")$Z)$rotmat
if (ncol(Z.est) > 1){H.inv <- varimax(coef(marss_fit, type = "matrix")$Z)$rotmat}
H.inv
# rotate factor loadings
Z.rot <- Z.est %*% H.inv
# rotate trends
trends.rot <- solve(H.inv) %*% marss_fit$states
trends.rot
# Add CIs to marssMLE object
marss_fit <- MARSSparamCIs(marss_fit)
# Use coef() to get the upper and lower CIs
Z.low <- coef(marss_fit, type = "Z", what = "par.lowCI")
Z.up <- coef(marss_fit, type = "Z", what = "par.upCI")
Z.rot.up <- Z.up %*% H.inv
Z.rot.low <- Z.low %*% H.inv
df <- data.frame(
est = as.vector(Z.rot),
conf.up = as.vector(Z.rot.up),
conf.low = as.vector(Z.rot.low)
)
df
head(trends.rot)
marss_trends = t(trends.rot)
marss_trends
marss_trends = t(trends.rot) %>%
mutate(year = yrmin:yrmax)
marss_trends = data.frame(t(trends.rot)) %>%
mutate(year = yrmin:yrmax)
head(marss_trends)
marss_trends = data.frame(t(trends.rot)) %>%
mutate(year = yrmin:yrmax) %>%
rename(X1 = DF1, X2 = DF2, X3 = DF3, X4 = DF4, X% = DF5)
marss_trends = data.frame(t(trends.rot)) %>%
mutate(year = yrmin:yrmax) %>%
rename(X1 = DF1, X2 = DF2, X3 = DF3, X4 = DF4, X5 = DF5)
marss_trends = data.frame(t(trends.rot)) %>%
mutate(year = yrmin:yrmax) %>%
rename(X1 = DF1, X2 = DF2, X3 = DF3, X4 = DF4, X5 = DF5)
marss_trends = data.frame(t(trends.rot)) %>%
mutate(year = yrmin:yrmax) %>%
rename(DF1,DF2,DF3,DF4,DF5)
marss_trends = data.frame(t(trends.rot)) %>%
mutate(year = yrmin:yrmax) %>%
rename(DF1 = X1, DF2 = X2, DF3 = X3, DF4 = X4, DF5 = X5)
head(marss_trends)
marss_trends = data.frame(t(trends.rot)) %>%
mutate(year = yrmin:yrmax) %>%
rename(DF1 = X1, DF2 = X2, DF3 = X3, DF4 = X4, DF5 = X5) %>%
pivot_longer(cols=DF1:DF5, values_to = 'trend',names_to = 'factor')
head(marss_trends)
ggplot(marss_trends, aes(x = year, y = trend)) +
geom_line() +
facet_grid(rows=factor)+
theme_bw()
ggplot(marss_trends, aes(x = year, y = trend)) +
geom_line() +
facet_grid(rows='factor')+
theme_bw()
ggplot(marss_trends, aes(x = year, y = trend)) +
geom_line() +
facet_grid(rows='factor')+
xlab("Year") + ylab("Trend") +
theme_bw()
Z.rot
Z.low <- coef(marss_fit, type = "Z", what = "par.lowCI")
Z.up <- coef(marss_fit, type = "Z", what = "par.upCI")
Z.rot.up <- Z.up %*% H.inv
Z.rot.low <- Z.low %*% H.inv
df <- data.frame(
est = as.vector(Z.rot),
conf.up = as.vector(Z.rot.up),
conf.low = as.vector(Z.rot.low)
)
df
df$factor = c(rep('DF1',16),rep('DF2',16),rep('DF3',16),rep('DF4',16),rep('DF5',16))
head(df)
Z.rot
locs = rownames(Z.rot)
df$site = rep(locs,5)
df
ggplot(df, aes(x=est, y = site)) +
geom_point +
facet_grid(cols = 'factor')+
theme_bw()
ggplot(df, aes(x=est, y = site)) +
geom_point() +
facet_grid(cols = 'factor')+
theme_bw()
ggplot(df, aes(x=est, y = site)) +
geom_point() +
facet_wrap(facets = 'factor', nrow = 5)+
theme_bw()
ggplot(df, aes(x=est, y = site)) +
geom_point() +
facet_wrap(facets = 'factor', ncol = 5)+
theme_bw()
ggplot(df, aes(x=est, y = site)) +
geom_point() +
facet_wrap(facets = 'factor', ncol = 5)+
xlab('Loading') + ylab("Site") +
theme_bw()
head(df)
ggplot(df, aes(x=est, y = site)) +
geom_point() +
geom_errorbarh( aes(min=conf.low, max=conf.up)) +
facet_wrap(facets = 'factor', ncol = 5)+
xlab('Loading') + ylab("Site") +
theme_bw()
ggplot(df, aes(x=est, y = site)) +
geom_point() +
geom_errorbarh( aes(xmin=conf.low, xmax=conf.up)) +
facet_wrap(facets = 'factor', ncol = 5)+
xlab('Loading') + ylab("Site") +
theme_bw()
site_order
df$site = factor(df$site, levels = site_order$location)
ggplot(df, aes(x=est, y = site)) +
geom_point() +
geom_errorbarh( aes(xmin=conf.low, xmax=conf.up)) +
facet_wrap(facets = 'factor', ncol = 5)+
xlab('Loading') + ylab("Site") +
theme_bw()
df$site = factor(df$site, levels = rev(site_order$location))
ggplot(df, aes(x=est, y = site)) +
geom_point() +
geom_errorbarh( aes(xmin=conf.low, xmax=conf.up)) +
facet_wrap(facets = 'factor', ncol = 5)+
xlab('Loading') + ylab("Site") +
theme_bw()
ggplot(df, aes(x=est, y = site)) +
geom_point() +
geom_errorbarh( aes(xmin=conf.low, xmax=conf.up)) +
annotate("segment",
x = 0, xend = 0,
y = 1, yend = 16,
colour = "blue")
ggplot(df, aes(x=est, y = site)) +
geom_point() +
geom_errorbarh( aes(xmin=conf.low, xmax=conf.up)) +
annotate("segment",
x = 0, xend = 0,
y = 1, yend = 16,
colour = "blue") +
facet_wrap(facets = 'factor', ncol = 5)+
xlab('Loading') + ylab("Site") +
theme_bw()
ggplot(df, aes(x=est, y = site)) +
geom_point() +
geom_errorbarh( aes(xmin=conf.low, xmax=conf.up)) +
annotate("segment",
x = 0, xend = 0,
y = 1, yend = 17,
colour = "blue") +
facet_wrap(facets = 'factor', ncol = 5)+
xlab('Loading') + ylab("Site") +
theme_bw()
plot(df_rotated$trends_mean[1,], trends.rot[1,])
plot(df_rotated$trends_mean[1,], trends.rot[1,],
xlab = "Bayes DF1", ylab('MARSS DF1'))
plot(df_rotated$trends_mean[1,], trends.rot[1,],
xlab = "Bayes DF1", ylab='MARSS DF1')
plot(df_rotated$trends_mean[1,], trends.rot[1,],
xlab = "Bayes - DF1", ylab='MARSS - DF1')
cor(x,y)
x = as.vector(df_rotated$trends_mean[1,]
cor(x,y)
x = as.vector(df_rotated$trends_mean[1,])
y = as.vector(trends.rot[1,])
cor(x,y)
# Run bayesian dynamic factor analysis to obtain northern sea level index for sablefish assessment ####
# load packages for 'bayesdfa'
library(bayesdfa)
library(rstan)
library(rstudioapi)
library(tidyverse)
library(ggplot2)
# options
options(mc.cores = parallel::detectCores())
rstan::rstan_options(auto_write = TRUE)
# set file locations
home_file = getwd()
data_loc = paste0(home_file, '/Data/')
results_loc = paste0(home_file, '/Results/')
##### load data files ###############################################################
# for plotting etc
site_order = data.frame(read.csv('Site_Order.csv',header=TRUE))
# the ssh data
ssh_x = readRDS( paste0(data_loc, 'Sea_level_data_spring_wide.rds'))
##### prep data for DF #########################################################
# set years to include
years1 = colnames(ssh_x)
years1 = as.numeric(years1[years1 != 'site'])
# reset min year here for shorter dfa time series ####
dfa_years = as.character(1925:max(years1))
# subset years
ssh = as.matrix(ssh_x[,dfa_years])
rownames(ssh) <- ssh_x$site
# subset to 16 sites
ssh = ssh[site_order$location,]
# get range for labeling files
yrmin = min(dfa_years)
yrmax = max(dfa_years)
# archive analyzed data
write.csv(ssh, paste0(data_loc,"Sea_level_for_DFA_",yrmin,'-',yrmax,".csv"), row.names = TRUE)
saveRDS(ssh, file = paste0(data_loc,"Sea_level_for_DFA_",yrmin,'-',yrmax,".rds"))
home_file = getwd()
data_loc = paste0(home_file, '/Data/')
results_loc = paste0(home_file, '/Results/')
library(MuMIn)
# set up equation ####
cn1 = c('DF1','DF2','DF3','DF4','DF5') #
cn2 = paste0("I(",cn1,"^2)")
cn = c(cn1,cn2)
for(i in 1:length(cn)){
x1 = cn[i]
if(i==length(cn)){x2 = x1}else{x2 = paste(x1,"+")}
if(i==1){eq = x2}else{eq = paste(eq,x2)}
}
eq
# formula ####
form1 = as.formula(paste0('RESIDS ~ ', eq))
fish = data.frame(read.csv( paste0(data_loc, 'Assessment_Data_w_StDev_2022_12.csv')))
head(fish)
fish$year = substring(fish$Label, nchar(fish$Label)-3, nchar(fish$Label))
fish$year
fish
head(fish)
x = grep("Recr_dev", fish$Label)
x
x = grep("Recr_Dev", fish$Label)
x
View(fish)
x = grep("RecrDev", fish$Label)
x
RecDev = fish[x,]
head(RecDev)
RecDev = fish[x,] %>%
rename(RecDev = value) %>%
select(year,RecDev)
RecDev = fish[x,] %>%
rename(RecDev = value) %>%
select(year,RecDev)
x = grep("RecrDev", fish$Label)
RecDev = fish[x,] %>%
rename(RecDev = value) %>%
select(year,RecDev)
RecDev = fish[x,] %>%
rename(RecDev = Value) %>%
select(year,RecDev)
head(RecDev)
# DFA
dfa = readRDS( "Data_Sea_Level_Indices_1925_2022")
getwd()
# DFA
dfa = readRDS( "Data_Sea_Level_Indices_1925_2022.rds")
dfile = full_join(RecDev,dfa)
# combine
dfa$year = as.numeric(dfa$year)
RecDev$year = as.numeric(RecDev$year)
dfile = full_join(RecDev,dfa)
head(dfiles)
head(dfile)
tail(dfile)
dfile = dfile %>% filter(years %in% fish_years)
dfile
head(dfile)
dfile = dfile %>% filter(year %in% fish_years)
# set analysis years ####
fish_years = 1975:2020
dfile = dfile %>% filter(year %in% fish_years)
dfile
head(dfile)
x = dfile %>% select(contains("DF"))
x
x = colnames(dfile %>% select(contains("DF")))
x
cn1 = colnames(dfile %>% select(contains("DF")))
# cn1 = c('DF1','DF2','DF3','DF4','DF5') #
cn2 = paste0("I(",cn1,"^2)")
cn = c(cn1,cn2)
for(i in 1:length(cn)){
x1 = cn[i]
if(i==length(cn)){x2 = x1}else{x2 = paste(x1,"+")}
if(i==1){eq = x2}else{eq = paste(eq,x2)}
}
# quick look
eq
## Run DREDGE #####################################################################
# make a formula
form1 = as.formula(paste0('RecDevs ~ ', eq))
# fit full model; step 1 for 'dredge'
fit = lm(form1, data=dfile, na.action = na.fail)
## Run DREDGE #####################################################################
# make a formula
form1 = as.formula(paste0('RecDev ~ ', eq))
# fit full model; step 1 for 'dredge'
fit = lm(form1, data=dfile, na.action = na.fail)
mtable = dredge(fit, m.lim = c(NA, 5),
subset= # require both linear and quadratic
dc(DF1, I(DF1^2)) &&
dc(DF2, I(DF2^2)) &&
dc(DF3, I(DF3^2)) &&
dc(DF4, I(DF4^2)) &&
dc(DF5, I(DF5^2)),
extra = list(R2 = function(x)
summary(x)$r.squared[[1]],
F = function(y)
summary(y)$fstatistic[[1]]),
trace=2 )
mtable2 = subset(mtable, delta<2)
mtable2
mtable2 = subset(mtable, delta<2)
mtable2
mtable4 = subset(mtable, delta<4)
mtable4
mtable4
# quick look
eq
fit_df1 = lm(RecDev ~ DF1, data=dfile)
summary(fit_df1)
anova(fit_df1)
write.csv(mtable, paste0(results_loc, "AIC-table-dredge-", min(fish_years),'-',max(fish_years), '.csv') )
write.csv(mtable, paste0(results_loc, "AIC-table-dredge-", min(fish_years),'-',max(fish_years), '.csv') )
mtable =data.frame(mtable)
write.csv(mtable, paste0(results_loc, "AIC-table-dredge-", min(fish_years),'-',max(fish_years), '.csv') )
fit_ew <- readRDS(paste0(data.loc,"Bayes_DFA_X1925-X2020_Trends-5_iter-3000_chains-3_R_un.rds"))
EW_loc = "C:/Users/nick.tolimieri/Documents/GitHub/Sablefish-SSH-2022/Bayes-SHH-Output/"
fit_ew <- readRDS(paste0(EW_loc,"Bayes_DFA_X1925-X2020_Trends-5_iter-3000_chains-3_R_un.rds"))
fit_ew <- data.frame(read.csv(paste0(EW_loc,"Data_for_dredge.csv"), header = TRUE))
df_ew <- data.frame(read.csv(paste0(EW_loc,"Data_for_dredge.csv"), header = TRUE))
head(df_ew)
EW_loc = "C:/Users/nick.tolimieri/Documents/GitHub/Sablefish-SSH-2022/Bayes-SHH-Output/"
df_ew <- data.frame(read.csv(paste0(EW_loc,"Data_for_dredge.csv"), header = TRUE))
write.csv( paste0(data_loc,'Data_combined_4dredge_',min(fish_years),'-',max(fish_years),'.csv'))
write.csv( paste0(data_loc,'Data_combined_4dredge_',min(fish_years),'-',max(fish_years),'.csv'), row.names = FALSE)
dfile
write.csv( dfile, paste0(data_loc,'Data_combined_4dredge_',min(fish_years),'-',max(fish_years),'.csv'), row.names = FALSE)
paste0(data_loc,'Data_combined_4dredge_',min(fish_years),'-',max(fish_years),'.csv'),header=TRUE)
df_new = data.frame(read.csv(
paste0(data_loc,'Data_combined_4dredge_',min(fish_years),'-',max(fish_years),'.csv'),header=TRUE))
head(df_new)
head(df_ew)
df_ew = df_ew %>% filter(year %>% df_new$year)
df_new = data.frame(read.csv(
paste0(data_loc,'Data_combined_4dredge_',min(fish_years),'-',max(fish_years),'.csv'),header=TRUE))
df_ew = df_ew %>% filter(year %>% df_new$year)
years = df_new$year
years
df_ew = df_ew %>% filter(year %>% years)
years = df_new$year
df_ew = df_ew %>% filter(year %>% years)
df_ew = df_ew %>% filter(year %in% years)
years =
df_ew = df_ew %>% filter(year %in% df_new$year)
plot(df_ew$DF1, df_new$DF1)
plot(df_ew$DF1, df_new$DF1)
plot(df_ew$DF1, df_new$DF1,
xlab = "Eric Ward bayesdfa",
ylab = "Nick T bayesdfa")
################
dfile = df_ew
cn1 = colnames(dfile %>% select(contains("DF")))
# cn1 = c('DF1','DF2','DF3','DF4','DF5') #
cn2 = paste0("I(",cn1,"^2)")
cn = c(cn1,cn2)
# make equation
for(i in 1:length(cn)){
x1 = cn[i]
if(i==length(cn)){x2 = x1}else{x2 = paste(x1,"+")}
if(i==1){eq = x2}else{eq = paste(eq,x2)}
}
# quick look
eq
## Run DREDGE #####################################################################
# make a formula
form1 = as.formula(paste0('RecDev ~ ', eq))
# fit full model; step 1 for 'dredge'
fit = lm(form1, data=dfile, na.action = na.fail)
mtable = dredge(fit, m.lim = c(NA, 5),
subset= # require both linear and quadratic
dc(DF1, I(DF1^2)) &&
dc(DF2, I(DF2^2)) &&
dc(DF3, I(DF3^2)) &&
dc(DF4, I(DF4^2)) &&
dc(DF5, I(DF5^2)),
extra = list(R2 = function(x)
summary(x)$r.squared[[1]],
F = function(y)
summary(y)$fstatistic[[1]]),
trace=2 )
mtable2 = subset(mtable, delta<2)
mtable2
mtable4 = subset(mtable, delta<4)
mtable4
mtable4
mtable =data.frame(mtable)
write.csv(mtable, paste0(results_loc, "AIC-table-dredge-", min(fish_years),'-',max(fish_years), '.csv') )
